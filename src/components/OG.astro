---
import { load } from 'cheerio';
import { writeFileSync, readFileSync } from 'node:fs';

type Props = {
  url: string;
};

type PostOGP = Record<
  string,
  {
    title: string;
    description: string;
    image: string;
    favicon: string;
  }
>;

type OGPJson = Record<string, PostOGP>;

const fileNameFoumd = Astro.request.url.match(/posts\/(.*)/);
if (fileNameFoumd === null)
  return Error('記事URLからファイル名の抽出ができませんでした。');
const postYearFound = Astro.request.url.match(/posts\/(\d{4})/);
if (postYearFound === null)
  throw Error('記事URLから年度が抽出できませんでした。');

const fileName = fileNameFoumd[1];
const postYear = postYearFound[1];
const { url } = Astro.props;
const generatedFilePath = new URL(
  `../../generated/ogp/${postYear}.json`,
  // astro は build 時に自身ではなく dist/entry.mjs に向けてしまいエラーになるので指定する
  import.meta.url,
);

const ogp: OGPJson = JSON.parse(readFileSync(generatedFilePath, 'utf8'));
let title: string = '';
let description: string = '';
let image: string = '';
let favicon: string = '';
const origin = new URL(url).origin;

if (ogp[fileName] && ogp[fileName][url]) {
  title = ogp[fileName][url].title;
  description = ogp[fileName][url].description;
  image = ogp[fileName][url].image;
  favicon = ogp[fileName][url].favicon;
} else {
  const html = await fetch(url).then((res) => res.text());
  const $ = load(html);

  title =
    $("meta[property='og:title']").attr('content') ?? $('title').text() ?? url;
  description =
    $("meta[property='og:description']").attr('content') ??
    $("meta[name='description']").attr('content') ??
    '';
  image = $("meta[property='og:image']").attr('content') ?? '';
  favicon = `https://www.google.com/s2/favicons?sz=${256}&domain=${origin}`;

  if (image && !image.startsWith('http')) {
    image = `${origin}${image}`;
  }

  if (import.meta.env.PROD) {
    const ogp = JSON.parse(readFileSync(generatedFilePath, 'utf8'));

    writeFileSync(
      generatedFilePath,
      JSON.stringify(
        {
          ...ogp,
          [fileName]: {
            ...ogp[fileName],
            [url]: {
              title,
              description,
              image,
              favicon,
            },
          },
        },
        null,
        2,
      ),
    );
  }
}
---

<div class="link-card my-5 border rounded-4 hover:bg-slate-100">
  <a
    href={url}
    target="_blank"
    class="max-h-[120px] flex break-all p-4 text-initial sm:max-h-[140px]"
  >
    <div class="w-full flex items-center justify-between space-x-4">
      <div class="flex flex-1 flex-col">
        <b class="line-clamp-2 overflow-hidden text-sm">
          {title}
        </b>
        {
          description && (
            <p class="line-clamp-1 mt-1 text-xs sm:line-clamp-2">
              {description}
            </p>
          )
        }
        <div class="mt-2 flex items-center">
          <img src={favicon} alt={`${origin} favicon`} width={16} height={16} />
          <small class="line-clamp-1 ml-1 whitespace-nowrap text-xs"
            >{origin}</small
          >
        </div>
      </div>
      {
        image && (
          <div class="h-full max-w-[220px] w-[120px] sm:w-inherit">
            <img
              src={image}
              alt={`${origin} OGP image`}
              class="ml-auto mr-auto h-full object-contain"
            />
          </div>
        )
      }
    </div>
  </a>
</div>
