---
import { getCollection } from 'astro:content';
import type { GetStaticPathsOptions, Page } from 'astro';
import type { CollectionEntry } from 'astro:content';
import TagPage from '@/pageComponents/tags/[tag]/[page].astro';
import { extractPostSlug } from '@/utils/extractPostSlug';

type Params = {
  tag: string;
};
type Props = {
  page: Page<CollectionEntry<'posts'>>;
};

export async function getStaticPaths({ paginate }: GetStaticPathsOptions) {
  const allPosts = (await getCollection('posts'))
    .sort((a, b) => b.data.pubDate.valueOf() - a.data.pubDate.valueOf())
    .map((post) => {
      return { ...post, slug: extractPostSlug(post.slug) };
    });

  const uniqueTags = [
    ...new Set(allPosts.map((post) => post.data.tags).flat()),
  ];

  return uniqueTags.map((tag) => {
    const filteredPosts = allPosts.filter((post) =>
      post.data.tags.includes(tag)
    );
    return paginate(filteredPosts, {
      params: { tag },
      pageSize: 10,
    });
  });
}

const { page } = Astro.props;
const { tag } = Astro.params as Params;
---

<TagPage tag={tag} page={page} />
